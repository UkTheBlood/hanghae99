React는 'SPA' 기반의 프론트엔드 개발 프레임워크 중 하나
'컴포넌트' 단위의 독립적인 블록을 이용한 개발 방법

SPA: single Page Application 
단 한 개의 페이지로 이루어진 애플리케이션 
<-> MPA와 상반되는 개념
MPA의 문제점
1. 좋아요를 눌렀는데 웹사이트 다시 로딩, "불편함"
2. 요즘 시대에는 리렌더링(re-rendering) 
즉, 페이지가 갱신되는 상황이 엄청 많아져 불편함

SPA의 특징과 장점
1. 딱 한개의 페이지(Single Page)로 구성된 웹 앱
2. 서버에 1회 리소스 요청
3. 필요할 때 데이터만 받아와서 기존 페이지를 '수정'해주는 방식
4. 사용자 입장에서 깜빡임이 없는 UX를 구현할 수 있음
5. angular, vue 비슷함

SPA 기반: 컴포넌트 단위로 변경사항을 반영하기 때문에 깜빡임 X ('렌더링이라 표현')
MPA기반: 하나의 변경사항을 반영하기 위해 전체 페이지 Re-load

단점
SEO: Search Engine Optimization 	// 새로운 개념
search engine 최적화
Ex) 구글에서 검색을 할 때, 구글에 있는 검색을 도와주는 로봇이 엔진이 찾으려고 하는 
웹사이트들을 잘 찾을 수 있도록 우리의 홈페이지가 HTML 파일을 잘 제공해야 함
 => 키워드에 맞는 HML 파일을 제공해야 함

react 베이스의 Next.js가 많이 쓰임




######################## 컴포넌트란? ######################
웹사이트의 모든 것

UI를 재사용이 가능한 개별적인 여러 조각으로 나누고, 개별적으로 살펴볼 수 있음
JavaScript 함수와 비슷하게 "Props"라는 임의의 입력을 받고 
화면에 어떻게 표시되는지를 기술하는 React 엘리먼트를 반환

함수형 컴포넌트를 사용하길 권장
결론: React 컴포넌트 세계에서 말하는 컴포넌트는 함수! 이다. // html을 return 하는 함수를 만들면 됨

부모 자식 컴포넌트
컴포넌트 안에 컴포넌트 안에 컴포넌트...
컴포넌트는 다른 컴포넌트를 품을 수 있고, 품고있는 컴포넌트는 부모 컴포넌트, 품어지는 컴포넌트는 자식 컴포넌트



##################### JSX 문법 ######################
Javascript를 확장한 문법 (return문 안에 있는 문법)
html 파일을 .js 파일에서 사용할 수 없어 나온 문법
// 닫는 태그 필수, 닫는 태그가 없으면 에러
// 최상위 태그가 2개 이상이면 에러



#################### Props ##################

컴포넌트 간의 정보 교류 방법 => 데이터를 교환하는 방법 중 하나
부모 컴포넌트가 자식 컴포넌트에게 물려준 데이터

Props는 반드시 위에서 아래 방향으로 흐름. 즉, 부모에서 자식 방향으로 흐른다
Props는 반드시 읽기 전용으로 취급하며, 변경 X

중간다리 역할(데이터를 전달하기 위해서만 존재하는 컴포넌트)의 컴포넌트가 많을 때
이를 props drilling이라 하는데 이를 피해야 함

많이 생기게 되면 중간에 오류가 생겨도 찾기 어려워짐(유지 보수의 문제
)

props children

자식 컴포넌트로 정보를 전달하는 또 다른 방법

Props 추출
구조 분해 할당을 통해 props 내부값 추출

팀원과 협업할 때 어떤 파일이 컴포넌트 파일인지 알 수 있는 명확한 방법은 JSX 확장자를 사용하는 것

state
컴포넌트 내부에서 바뀔 수 있는 값
어떠한 기능을 하는 함수

쓰는 목적
- UI를 바꾸기 위해서(렌더링을 다시 하기 위해서)

############## 불변성, 순수함수 ################

불변성 : 메모리에 있는 값을 변경할 수 없는 것
원시 데이터는 불변성이 있지만, 원시데이터가 아닌 것들은 불변성이 없다

react에서는 컴포넌트가 화면에 그려지기 위해 렌더링을 함
조건: state가 바뀔 때
-> input 에제 했을 때, 화면이 바로바로 바뀌는거 자체가 렌더링

원시 데이터는 불변성이 있어 문제가 없지만 원시데이터가 아닌 것들은 불변성이 없기 때문에
state를 바뀔 때 조치를 취해야 함

#################### 컴포넌트와 렌더링 #########################
컴포넌트
- React 핵심 블록 중 하나
- React에서 개발할 모든 애플리케이션이 컴포넌트라는 조각으로 구성
- UI 구축 작업을 훨씬 더 쉽게 만들어줌
- 즉, React의 핵심 빌딩 블록 중 하나로, UI 요소를 표현하는 최소한의 단위이며 
화면의 특정 부분이 어떻게 생길지 정하는 선언체 #!중요

선언체가 중요한 이유: 
리액트의 컴포넌트 기반 개발 이전에는 브라우저에서 동적으로 변하는 UI를 표현하기 위해
직접 DOM 객체를 조작하는 명령형 프로그래밍 방식으로 구현

명령형: 어떻게(How)를 중요하게 여겨 프로그램의 제어의 흐름과 같은 방법을 제시하고 목표는 명시하지 않음
명령형으로 작성된 코드의 경우 hello, World를 출력하기 위해 컴퓨터가 수행하는 절차를 일일히 코드로 작성
코드가 길어지고 복잡해지면 관리하기 어렵고 보기 힘들어 유지보수가 어려움

선언형: 무엇(What)을 중요하게 여겨 제어의 흐름보다 원하는 목적을 중요하게 여기는 것
내가 UI를 선언하고, render 함수를 호출하면 React가 알아서 수행해 화면에 출력
어떻게 그려야 할지는 React 내부에 잘 숨겨져 추상화가 되어있음

렌더링
React에서의 렌더링이란?
컴포넌트가 현재 /props와 /state의 상태에 기초하여 UI를 어떻게 구상할지 컴포넌트에게 요청하는 작업
=> 단순하게 화면을 그리는 것이 아닌, 현재의 props와 state와 같은 데이터를 기초해서 UI를 어떻게 구상할지 

트리거(trigger): 렌더링을 일으키는 것
조건
1. 첫 리액트 앱이 실행됐을 때
2. 현재 리액트 내부에 어떤 상태(state)에서 변경이 발생했을 때
- 컴포넌트 내부 state가 변경되었을 때
- 컴포넌트에 새로운 props가 들어올 때
- 상위 부모 컴포넌트에서 위에 두 이유로 렌더링이 발생했을 때

렌더링(rendering): 렌더링을 하는 것
커밋(commit): 렌더링 결과를 실제 DOM에 보내주는 것





























