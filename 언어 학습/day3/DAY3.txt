2. 다른 언어 데이터 타입의 장단점
파이썬
장점
- 타입이 많이 자유로움
- 다른 타입의 데이터를 같은 변수에 할당 가능

단점
- 타입이 자유로운 만큼 데이터 처리를 하는데 다른 언어보다 느림
- 타입을 지정해주지 않아 인터프리터에서 실행하기 전까지 오류 확인 불가
Ex) int 타입과 str타입을 더하는데 실행하기 전까지 오류를 알 수 없음.

3. 기본형과 참조형 구분 이유, 하나의 방식 가능 불가능
참조형 데이터가 여러 개의 프로퍼티를 모은 그룹이고 
이 차이로 인해 참조형 데이터를 '가변값'으로 여겨야만 하는 상황이 발생하기 때문

4. 불변 객체 이용 이유


5. 
 - undefined는 값이 존재하지 않을 때 자동으로 부여되는 경우가 있기 때문.
 - 사용자가 없음을 표시하기 위해 null을 사용
 - 사용자가 명시적으로 '없음'을 표시하려면 null을 대입하는 것이 좋음


데이터 타입
 종류 
기본형
 - 숫자(number)
 - 문자(string)
 - boolean
 - null
 - undefined
 - symbol
 - 할당이나 연산시 복제되고 담긴 주솟값을 바로 복제
 - 모두 불변값

참조형
 - 객체(object)
    - Map, WeakMap, Set, WeakSet (객체의 하위분류)
 - 배열(array)
 - 참조된다고 알려져 있으며 값이 담긴 주솟값들로 이루어진 
   묶음을 가리키는 주소값을 복제



3-1. 타입을 지정하는 ~~
 - 타입을 자동으로 변환하지 않는 부분
 - Ex) 1 + true 를 실행했을 때 js는 2를 반환하지만 다른 언어는 타입을 변환시키지 않기
때문에 error가 발생함
 - function multiply(a, b) {
	return a * b;
}
multiply(true, "hi") => 런타임의 오류가 될 수 있음

3-2. 



호이스팅: 선언문이 마치 최상단에 끌어올려진 듯한 현상
자바스크립트 엔진이 먼저 전체 코드를 스캔하면서 변수 같은 정보를 실행 컨텍스트 
어딘가에 미리 기록(record)

환경 레코드 (environment record)
식별자와 식별자에 바인딩 된 값을 기록

함수 표현식: 변수에 함수를 담아서 함수를 선언하는 방식
 - 함수를 변수에 담고 있기 때문에 변수 호이스팅과 동일하게 동작
var로 선언한 경우: { fruits : undefined }  // undefined를 호출하려 해서 type error
let, const로 선언한 경우: 환경 레코드를 초기화하지 않아 reference error

함수 선언문 방식: 함수 선언과 동시에 완성된 함수 객체를 생성해서 환경 레코드에 기록
 - 선언 전에도 함수를 사용할 수 있음 //사용을 지양하고자 하는 목소리

외부 환경 참조 (Outer Environment Reference)

record와 outer을 합쳐 Lexical Environment (렉시컬 환경, 정적 환경)

식별자 결정
코드에서 변수나 함수의 값을 결정하는 것
콜 스택 안에 동일한 식별자가 여럿일 때 자바스크립트가 어떻게 outer을 
활용해서 의사결정 하는지?
 - 동일한 식별자가 있으면 하위 식별자가 나타나고 상위 식별자를 찾지 않고 종료
 - 동일한 식별자로 인해 상위 스코프에서 선언된 식별자의 값이 가려지는 현상을 변수 섀도잉이라 한다
 - 스코프 체인: 식별자를 결정할 때 활용하는 스코프들의 연결리스트



모르는 부분이 있으면 적은 다음 다음에 찾아봐도 좋음



















