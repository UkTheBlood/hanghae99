// 함수를 만났을 때 실행 컨텍스트가 열린다고 생각함녀 됨
// 컨텍스트 내부에 있는 변수 (=식별자 정보)를 수집하는 일을 가장 먼저 -> 호이스팅
// 중첩함수 -> 실행 순서, 종료 시점 -> 스택, 콜스택
// 변수의 유효 범위 (=스코프), 스코프 체인

// 1. 호이스트 대상 -> 모든 선언문 혹은 정의부
// 선언 단계 -> 초기화 단계 (undefined) -> 할당 단계

const a = 1; //선언까지
let b = 1; //선언까지


var c = 3; // 선언 + 초기화 단계까지 수집 / 참조를 먼저 해도 error가 발생하지 않음


//선언식은 함수를 먼저 참조를 해도 함수 전체가 수집
//표현식, 화살표 함수는 선언 단계까지만 수집이 됨

function foo() {
    const a = 1;

    function foo1() {
        console.log(a);
        let b = 2

        foo2();

        function foo2() {
            console.log(b)
        }
        console.log('foo1');
    }

    foo1();
    console.log('foo');
}

foo();

// 1. foo 실행 컨텍스트 열림
// 2. foo1 함수 실행문 만남
// 3. foo 실행 멈추고 -> foo1 실행 컨텍스트 열림
// 4. foo1 실행 멈추고 -> foo2 실행 컨텍스트 열림
// 5. foo2 내부의 모든 실행문을 실행시키면 -> foo2 함수 실행 종료 -> foo2 함수 실행 컨텍스트 닫힘
// 6. foo1 실행 제게 -> 내부의 모든 실행문 실행 -> foo1 함수 실행 종료 -> foo1 함수 실행 컨텍스트 닫힘
// 7, foo 실행 잭 -> ....