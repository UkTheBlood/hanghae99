동기 비동기
동기적 실행: 순차적으로 작업이 실행되는데, 이전 작업이 실행 중이라면 다음 작업을 실행할 수 없음.
이전 작업의 실행 결과가 필요할 때 적합하며 JS는 일반적으로 동기 실행을 기반

비동기적 실행: 비 순차적으로 작업을 실행하는데, 이전 작업의 실행 여부가 다음 작업에 영향이 없음
작업이 완료 되는데 시간이 걸림.

자바스크립트 엔진은 싱글 스레드로 동작한다. 

프로그램: 어떤 작업을 위해 실행할 수 있는 파일이며, 해당 파일이 실행되면 하나의 프로세스가 실행된다.
프로세스가 실행되면 운영체제로부터 시스템 자원(메모리와 연산 능력)을 할당 받는다. 
이러한 자원을 통해 프로그램이 컴퓨터에서 연속적으로 프로세스를 실행 할 수 있게 되는 것이다.
프로세스:  실행된 프로그램을 얘기하는데, 하나의 프로세스 내에서 실행되는 흐름의 단위로 스레드가 있다.
일반적으로 스레드는 "일꾼"으로 비유된다. 
컴파일: 프로세스가 수행할 코드가 프로그래밍 언어로 작성되어 기계어로 번역되어 순차적으로 실행하는 과정
/* 자바스크립트의 특징 */
- 일반적으로 프로그래밍 언어로 작성된 프로그램이 프로세스가 되기 위해서는 "운영체제"로 부터
시스템의 자원을 할당받아야 하는데, 자바스크립트에서는 프로세스와 운영체제 사이에 "브라우저"가 존재

즉. 자바스크립트는 싱글 스레드로 동작하며, 하나의 일꾼을 가지고 우리가 작성한 코드를 수행한다.

자바스크립트 엔진은 싱글 스레도르 동작하지만, 비동기 처리를 하기 위해 별도의 스레드가 존재한다.
별도의 스레드 "브라우저"

자바스크립트 비동기 런타임 과정

Call Stack: 자바스크립트에서 수행해야 할 함수를 순차적으로 스택에 담아 처리
 - a,b,c,d의 순서로 넣으면 역순으로 d,c,b,a로 나옴
Wep API: 웹 브라우저에서 제공하는 API, AJAX나 Timeout등의 비동기 작업을 실행
Task(Callback) Queue: Web aPI에서 넘겨받은 Callback 함수를 저장
Event Loop: Call Stack이 비어있으면 Task Queue의 작업을 Call Stack으로 옮김

JS는 엔진이 단 하나의 Call Stack으로 코드를 실행하기 때문에 기본적으로 동기 실행 언어지만
비동기적 실행이 불가능한 것은 아님
- Task(Callback) Queue와 Event Loop의 도움이 필요

순서
1. Call Stack에서 동기작으로 작업을 실행하며 필요에 따라 Web API를 호출한다.
2. Web API는 여러 스레드를 이용해 비동기적으로 작업을 실행하고, 작업이 완료되면 
Task(Callback) Queue로 전달한다.
3. Event Loop가 Call Stack에 작업이 모두 다 마치고 비어있으면 
Task(Callback) Queue를 하나씩 Call Stack에 추가한다

자바스크립트가 싱글 스레드를 사용하는 이유
- '쉬워서'
만약 멀티 스레드로 실행하게 되면 웹 페이지에서 발생하는 동시성의 문제에 ㄷ해 해결해야 한다.
단일 스레드로 실행되기 때문에 다중 스레드 환경에서 발생할 수 있는 복잡한 시나리오를 신경 쓸 필요가
없으며 비동기 처리를 통해 쉽게 여러 요청이 가능하다. 

결론
- 자바스크립트는 싱글스레드로 동기 실행을 하지만, "브라우저"를 통해 비동기 처리가 지원된다.






















































