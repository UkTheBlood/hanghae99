.THIS
1. 전역객체란 무엇을 의미하는 것
- 모든 객체의 유일한 최상위 객체를 의미, browser: window, server: global 객체 의미
- 실행 컨텍스트에 컨트롤이 들어가기 이전에 생성되며 constructor가 없기 때문에 
new 연산자를 이용하여 새롭게 생성할 수 없음 (개발자가 전역 객체를 생성할 수 없음)
- 전역 객체는 전역 스코프를 갖게 됨
- 전역 객체의 자식 객체를 사용할 때 전역 객체의 기술을 생략할 수 있음
Ex) document 객체는 전역 객체 window의 자식 객체로 window.document로 
사용할 수 있으나 일반적으로 생략함
- 사용자가 정의한 변수와 전역 객체의 자식 객체 이름이 충돌할 경우
명확히 전역 객체를 기술하여 혼동을 방지
- 전역 객체는 전역 변수(global variable)를 프로퍼티로 가지게 된다. 
(전역 변수는 전역 객체의 프로퍼티)
- 글로벌 영역에 선언한 함수도 전역 객체의 프로퍼티로 접근 가능
 (전역 함수는 전역 객체의 메소드)

2.다른 언어의 객체와 자바스크립트 객체의 차이점
다른 대부분의 객체지향 언어에서 this는 클래스로 생성된 인스턴트 객체 의미
클래스에서만 사용할 수 있기 때문에 혼란의 여지가 없거나 많지 않음
자바스크립트에서의 this 는 어디서든 사용 가능


3. this는 어떻게 달라질까?
상황에 따라 달라짐.
this는 함수를 호출할 때 결정됨 
(실행 컨텍스트가 생성될 때 함께 바뀌는데 실행 컨텍스트는 함수가 호출될 때 생성)
1) 전역 공간
전역 공간에서 this는 전역 객체
console.log(this === window) //true

2)메서드 내부
this에는 호출한 주체에 대한 정보가 담김
호출 된 주체는 함수명 앞의 객체
>> 함수명 앞의 객체에 대한 정보가 this에 담김
점 표기법의 경우 마지막 점의 앞에 명시된 객체

3)함수 내부
this는 호출한 주체에 대한 정보가 담기는데, 함수는 호출 주체 즉, 객체를 명시하지 않고
개발자가 코드를 직접 관여한 것이기 때문에 주체를 알 수 없게 됨
this가 지정되지 않은 경우 전역 객체를 바라보기 때문에 전역 객체를 가리키게 됨

4) 메서드의 내부 함수에서의 this
함수를 실행하는 주변 환경이 메서드 내부인지 함수 내부인지 관계 없이 
함수를 호출하는 구문 앞에 대괄호나 점의 유무가 중요



4. 함수와 메서드의 차이에 대해 조금 더 알게 된 점.
this는 함수와 객체(메서드)를 실질적으로 구분하는 거의 유일한 기능
상황별로 this 키워드에 다른 값을 부여함으로써 이를 구현

공통점: 함수와 메서드는 미리 정의한 동작을 수행하는 코드
이 둘을 구분하는 유일한 차이 "독립성"
함수
- 함수는 그 자체로 독립적인 기능 수행
- 어떤 함수를 호출할 때 함수 이름 앞에 객체가 명시돼 있지 않은 경우
메서드
- 자신이 호출한 대상 객체에 관환 동작 수행
- 어떤 함수를 호출할 때 함수 이름 앞에 객체가 명시돼 있는 경우

5. 책에서 self 변수 선언 머시기
호출 주체가 없을 때 자동으로 전역객체를 바인딩하는 것이 아닌 당시 
주변 환경의 this를 그대로 상속 받아 사용하기 위해.

6. 함수와 메서드의 차이를 다시 말하기
위에 있는 내용 정리

7. 프로퍼티에 할당, 메서드로서의 호출 설명

8. this가 주는 인상 이라는 개념을 생각한 대로
어떤 식으로 작동되는지 등을 배우고 이해가 되었지만, 
정확히 어떤 코드를 작성하고 구현할 때 사용되는지 아직 모르겠음

keyword
전역:
전역 변수: 함수 외부에 선언 된 변수로, 프로그램 전체에 접근할 수 있는 변수
렉시컬 환경: block, function, script를 실행하기 앞서 생성되는 특별한 객체로
 실행할 스코프 범위 안에 있는 변수와 프로퍼티를 저장하는 객체
전역 객체의 렉시컬 환경: 
메서드: 자신이 호출한 대상 객체에 관환 동작 수행
함수: 그 자체로 독립적인 기능 수행
프로퍼티: 
할당: 값을 선언(let a = 3;)/  a라는 변수에 3이라는 값을 할당한 것
호출: 
익명 함수: 함수명 대신 변수명에 함수 코드를 저장하는 구현 방식



######################################################

콜백 함수

다른 코드의 인자로 넘겨주는 함수, 인자를 넘겨줌으로써 그 제어권도 함께 위임하게 됨
필요에 따라 적절한 시점에 실행
'제어권'과 관련이 높음

함수 A를 호출하면서 특정 조건이 갖추어지면 함수 B를 실행

정의: 함수에 파라미터로 들어가는 함수
용도: 순차적으로 실행하고 싶을 때
//함수 안에 함수가 들어감
특징
- 다른 곳에서 만든 함수도 콜백함수로 넣을 수 있음
- 함수명 작명 가능
- 콜백함수가 필요한 함수만 콜백 함수 사용 가능

안정적으로 확실하게 특정 코드를 순차적으로 사용할 수 있음
/ https://www.youtube.com/watch?v=-iZlNnTGotk /

1. 프로그래밍의 제어권이란?
1) 실행 시점에 관한 제어권
setTimeout(function A() {
    B
}, 1000)
// setTimeout이 제어권을 처음에 가지고 있으며,
// 안에 있는 A함수가 인자로 넘겨지는데
// 인자로 넘겨진 callback함수(A)를 
// setTimeout이 넘겨진 A 함수가 1초 후에 실행된다.

2) 인자에 대한 제어권
var argument = [5, 10, 15].map(function(currentValue, index) {
    console.log(currentValue, index);
    return currentValue + 15;
});
console.log(argument);

map 메서드: 대상이 되는 배열의 모든 요소들을 처음부터 끝까지 하나씩 꺼내어
콜백 함수를 반복 호출하고, 결과들을 모아 새로운 배열을 반환
//1. currentValue에 5, index에 0이 반환
//2. return 5 + 15 > 20 반환
//3. currentValue에 10, index에 1이 반환
//4. return 10 + 15 > 25 반환
//5. currentValue에 15, index에 2이 반환
//6. return 15 + 15 > 30 반환
//7. 새로운 배열 [20, 25, 30]

map 메서드가 콜백 함수를 호출할 때 인자에 어떤 값들을 어떤 순서로 
넘길 것인지 전적으로 map 메서드에 달려있다. 

3) this
this가 전역 객체를 참조하지만, 제어권을 넘겨 받을 코드에서 
콜백 함수에 별도로 this가 될 대상을 지정한 경우에는
그 대상을 참조하게 된다



/ https://student513.tistory.com/67 /



2. 콜백 지옥이란?
콜백 함수를 익명 함수로 전달하는 과정이 반복되어 
코드의 들여쓰기 수준이 감당하기 힘들 정도로 깊어지는 현상

동기: 현재 실행중인 코드가 완료된 후에 다음 코드 실행
CPU의 계산에 의해 즉시 처리가 가능한 대부분의 코드

비동기: 현재 실행 중인 코드 완료 여부와 상관 없이 다음 코드 넘어감
Ex) 
setTimeout
사용자의 요청에 의해 특정 시간이 경과되기 전까지 어떤 함수의 실행 보류

addEventListener
사용자의 직접적인 개입이 있을 때 비로소 어떤 함수를 실행

문제점
- 가독성과 어색함

해결
- 익명의 콜백 함수를 모두 기명으로 전환




3. 추상화란?
- 객체의 공통적인 프로퍼티와 메서드를 뽑아내는 작업
- 특정 기능을 하는 그룹의 공통된 기능을 정의하는 작업
- 선언 부분과 구현 부분 중 추상화는 오직 선언 부분에만 정의하고
구현 부분은 작업하지 않는다
- 복잡함 속에서 필요한 관점만을 추출하는 행위
- 좋은 객체를 만드는 법 즉, 설계를 잘 하는 법



keyword
- 고차함수: 인자로 받거나 또는 함수를 반환함으로써 작동 하는 함수이다.
 한 마디로 함수를 인자로 받거나 함수를 출력으로 반환하는 함수

/ https://velog.io/@kylee31/JS-%EC%B6%94%EC%83%81%ED%99%94-%EC%BA%A1%EC%8A%90%ED%99%94 /
/ https://ffoorreeuunn.tistory.com/154 /











미니 프로젝트: CRUD + 로그인
클론 코딩: 무한 스크롤 등


//this는 많이 안 쓰이고, 콜백 함수는 자주 쓰임
//콜백 함수 잘 보는게 좋음
//클로저는 내용이 많고 이해되지 않는 개념이라 
react에 많이 쓰여 이번에 꼼꼼히 보는게 좋음

//호이스팅이 어떤 것인지, 왜 안 쓰이는 것인지, 쓰면 생기는 문제점
//Class -> 프로토 타입 
//인스턴스를 만들어 메서드를 정의하고 사용하는 것
//프로토 체인

//p 75























